//----------------------------------------------------------------------------------------------------------
#define NS_MESSAGE		1		// отчет по нештатным ситуациям (событиям)
#define DIAGNOSTIC_MESSAGE	2		// отчет по диагностическим сообщениям
#define LOGIKA			2		// отчет c контроллера Логика
#define SOURGE_ERROR		3		// отчет по перерывам электропитания
#define ARCHIVE_DATA		4		// отчет по архивным данным
#define MIN_ARCHIVE_NUM		200		//
#define MAX_ARCHIVE_NUM		222
//----------------------------------------------------------------------------------------------------------
// dRead - рабочий поток. после запуска выполняет задачи сканирования клавиатуры,
// получения данных и событий от ядра, и их вывода на дисплей. Поток завершается
// по команде пользователя с клавиатуры (выбор пункта выход (или "Esc")). Ядро
// может остановить поток вызвав функцию dWorkEnable с параметром FALSE.
VOID * dRead (VOID * devr);
// Должна запускаться первой. Функция инициализирует порт и сканирует шину
// в поисках устройств. Параметры blok - номер ком-порта (COM1-0,COM2-1,COM3-2,MSP1-3...),
// speed - скорость связи. Возвращает количество устройств на шине.
INT dScanBus (SHORT blok, UINT speed);
// При параметре work = TRUE - работа разрешена. При FALSE - производится остановка
// рабочего потока и очистка дисплея.
VOID dWorkEnable (BOOL work);
// Производит деинициализацию дисплея
BOOL dDeInit(VOID);
//----------------------------------------------------------------------------------------------------------
// Возвращает массив структур из 4 элементов, содержащих текущие данные и их символьные имена.
// + общее количество значений (total) и общее количество трубопроводов-расходов (tota1)
//VOID GetValues (DplExchO &dat, UINT total, UINT tota1);
// Возвращает массив структур из 4 элементов, содержащих сообщения и ошибки.
//VOID GetMessages (MsgExch &msg, UINT total);
// Возвращает массив структур из 1 элемента, содержащего один параметр
//VOID GetOptions (PrmExch &msg, UINT total);
// Возвращает массив структур из 4 элементов, содержащих значения
//VOID GetDatas (DtaExch &msg, UINT total);
//----------------------------------------------------------------------------------------------------------
// сообщает дисплею, что производится поиск и обработка информации
// TRUE - начало поиска. FALSE - конец.
VOID ReportForming (BOOL doit);
//----------------------------------------------------------------------------------------------------------
// Примеры
// type = 4 / quant = 0 / start = FILETIME(28.09.2005 9:40) / end = FILETIME(28.09.2005 10:40)
// печать поминутных архивных значений в промежутке от 9:40 до 10:40 (60 значений)
// type = 3 / quant = 50 / start = FILETIME(28.09.2005 9:40) / end = FILETIME(28.09.2005 10:40)
// печать мгновенных значений в промежутке от 9:40 до 10:40 (максимум 50 значений от самых последних)
// type = 1 / quant = 30 / start = FILETIME(01.01.2001 0:00) / end = FILETIME(28.09.2005 10:40)
// печать 30ти последних нештатных ситуаций предшествующих 28.09.2005 10:40
//----------------------------------------------------------------------------------------------------------
// отправка запроса на печать
// SendMessage(hWnd1,MSG_MSGPRINT,(WPARAM)&SPrint,(LPARAM)0);
//-----------------------------------------------------------------------------
// входные параметры:
// SHORT type - тип данных на печать
	 //	1 - отчет по нештатным ситуациям (событиям).
	 //	2 - отчет по диагностическим сообщениям.
	 //	3 - отчет по (мгновенным) данным,
	 // 4 - отчет по архивным (средним) данным,
// SHORT Period - период фомирования отчета
 	 // при type=4
	 //	1 - поминутные выборки (обычно 60 выборок с интнервалом 1 минута).
	 //	2 - почасовые выборки (обычно 24 выборки с интнервалом 1 час).
	 // 3 - посуточные выборки (обычно 28-31 выборка с интнервалом 1 день).
	 // 4 - помесячные выборки (обычно 12 выборки с интнервалом 1 месяц).
	 //	5 - выборки по годам (с интнервалом 1 год).
	 // при type=1,2,3
	 // quant записей или НС в интервале start - end.
// SHORT pipes - номер трубопровода
// выходные значения
// сформированная структура SPrint, формирование события SendMessage(hWnd1,MSG_MSGPRINT,(WPARAM)&sp,(LPARAM)0);
//-----------------------------------------------------------------------------
VOID PrinterOut (tm *st, short type, short Period, short pipes);	// формирование запроса на печать
